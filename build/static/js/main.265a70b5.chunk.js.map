{"version":3,"sources":["listItemComponent.js","showFormInput.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ListItem","props","toggleEditItem","setState","editableItem","state","key","this","index","style","color","urgency","className","onClick","onSubmit","event","preventDefault","value","item","onChange","editInput","onKeyDown","e","id","name","editUrgencyInput","deleteItem","margin","React","Component","ShowFormInput","formSubmit","todoInput","inputUpdate","urgencyInput","urgencyInputUpdate","App","displayTaskInput","showTaskInput","input","todo","target","i","items","slice","prevState","filter","_","src","logo","alt","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kUA+DeA,G,kBA5Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,eAAiB,WACf,EAAKC,SAAS,CAAEC,cAAc,KAN9B,EAAKC,MAAQ,CACXD,cAAc,GAHC,E,sEAWT,IAAD,OACP,OACE,oCACE,wBAAIE,IAAKC,KAAKN,MAAMO,MAAOC,MAAO,CAACC,MAAOH,KAAKN,MAAMU,UACnD,yBAAKC,UAAU,YACbC,QAAS,kBAAM,EAAKX,mBACnBK,KAAKF,MAAMD,aACV,0BAAMU,SAAU,SAAAC,GACRA,EAAMC,iBACN,EAAKb,SAAS,CAACC,cAAc,MAEnC,2BAAOQ,UAAU,YACVK,MAAOV,KAAKN,MAAMiB,KAClBT,MAAO,CAACC,MAAOH,KAAKN,MAAMU,SAC1BQ,SAAU,SAACJ,GACV,EAAKd,MAAMmB,UAAUL,EAAO,EAAKd,MAAMO,QAEzCa,UAAW,SAACC,GACI,UAAVA,EAAEhB,KACJ,EAAKH,SAAS,CAACC,cAAc,OAGrC,6BACA,2BAAOQ,UAAU,aAAjB,aACE,4BAAQW,GAAG,gBACHC,KAAK,gBACLP,MAAOV,KAAKN,MAAMU,QAClBQ,SAAU,SAACJ,GACT,EAAKd,MAAMwB,iBAAiBV,EAAO,EAAKd,MAAMO,SAEtD,4BAAQS,MAAM,cAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,QAEN,4BAAQL,UAAU,kBAAlB,SAGFL,KAAKN,MAAMiB,MAEf,4BAAQN,UAAU,MAAMC,QAAS,kBAC/B,EAAKZ,MAAMyB,WAAW,EAAKzB,MAAMO,QAAQC,MAAO,CAAEkB,OAAQ,WAD5D,gB,GAnDaC,IAAMC,YCmBdC,MAnBf,SAAuB7B,GACrB,OACE,yBAAKW,UAAU,aACb,0BAAME,SAAUb,EAAM8B,YACpB,8BAAUnB,UAAU,aAAaK,MAAOhB,EAAM+B,UAAWb,SAAUlB,EAAMgC,cACzE,6BACE,4CACA,4BAAQV,GAAG,gBAAgBC,KAAK,gBAAgBP,MAAOhB,EAAMiC,aAAcf,SAAUlB,EAAMkC,oBACzF,4BAAQlB,MAAM,cAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,SAGJ,4BAAQL,UAAU,cAAlB,aCkFOwB,E,YA1Fb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRoC,iBAAmB,WACjB,EAAKlC,SAAS,CAACmC,eAAgB,EAAKjC,MAAMiC,iBAVzB,EAanBL,YAAc,SAAAlB,GACZ,EAAKZ,SAAS,CAACoC,MAAM,eAAK,EAAKlC,MAAMkC,MAAjB,CAAwBC,KAAMzB,EAAM0B,OAAOxB,WAd9C,EAiBnBkB,mBAAqB,SAAApB,GACnB,EAAKZ,SAAS,CAACoC,MAAM,eAAK,EAAKlC,MAAMkC,MAAjB,CAAwB5B,QAASI,EAAM0B,OAAOxB,WAlBjD,EAqBnBG,UAAY,SAACL,EAAO2B,GAClB,IAAMC,EAAQ,EAAKtC,MAAMsC,MAAMC,QAC/BD,EAAMD,GAAGF,KAAOzB,EAAM0B,OAAOxB,MAC7B,EAAKd,SAAS,CAACwC,MAAOA,KAxBL,EA2BnBlB,iBAAmB,SAACV,EAAO2B,GACzB,IAAMC,EAAQ,EAAKtC,MAAMsC,MAAMC,QAC/BD,EAAMD,GAAG/B,QAAUI,EAAM0B,OAAOxB,MAChC,EAAKd,SAAS,CAACwC,MAAOA,KA9BL,EAiCnBZ,WAAa,SAAAhB,GACXA,EAAMC,iBACN,EAAKb,SAAS,CACZwC,MAAK,sBAAO,EAAKtC,MAAMsC,OAAlB,CAAyB,EAAKtC,MAAMkC,QACzCA,MAAO,CAACC,KAAM,GAAI7B,QAAS,cAC3B2B,eAAe,KAtCA,EA0CnBZ,WAAa,SAAAlB,GACX,EAAKL,UAAS,SAAA0C,GACZ,MAAO,CAACF,MAAOE,EAAUF,MAAMG,QAAO,SAACC,EAAGL,GAAJ,OAAUA,IAAMlC,UA1CxD,EAAKH,MAAQ,CACXkC,MAAO,CAACC,KAAM,GAAI7B,QAAS,cAC3BgC,MAAO,GACPL,eAAe,GALA,E,sEAgDT,IAAD,OAEP,OACA,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKoC,IAAKC,IAAMrC,UAAU,WAAWsC,IAAI,UAE3C,yBAAKtC,UAAU,YACb,2CACA,yBAAKA,UAAU,YACb,6BACE,4BACGL,KAAKF,MAAMsC,MAAMQ,KAAI,SAACjC,EAAMV,GAC3B,OAAQ,kBAAC,EAAD,CACNF,IAAKE,EACLA,MAAOA,EACPU,KAAMA,EAAKsB,KACX7B,QAASO,EAAKP,QACdS,UAAW,EAAKA,UAChBK,iBAAkB,EAAKA,iBACvBC,WAAY,EAAKA,mBAM3B,4BACEd,UAAU,MACVC,QAASN,KAAK8B,kBAFhB,cAIC9B,KAAKF,MAAMiC,eAAiB,kBAAC,EAAD,CAC3BP,WAAYxB,KAAKwB,WACjBC,UAAWzB,KAAKF,MAAMkC,MAAMC,KAC5BP,YAAa1B,KAAK0B,YAClBC,aAAc3B,KAAKF,MAAMkC,MAAM5B,QAC/BwB,mBAAoB5B,KAAK4B,2B,GApFjBN,aCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.265a70b5.chunk.js","sourcesContent":["import React from 'react';\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editableItem: false\n    };\n  }\n\n  toggleEditItem = () => {\n    this.setState({ editableItem: true })\n  }\n\n  render() {\n    return (\n      <>\n        <li key={this.props.index} style={{color: this.props.urgency}}>\n          <div className=\"list-item\"\n            onClick={() => this.toggleEditItem()}>\n            {this.state.editableItem ?\n              <form onSubmit={event => {\n                      event.preventDefault()\n                      this.setState({editableItem: false})\n                    }}>\n                <input className=\"inputEdit\" \n                       value={this.props.item}\n                       style={{color: this.props.urgency}}\n                       onChange={(event) => {\n                        this.props.editInput(event, this.props.index)\n                       }}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          this.setState({editableItem: false})\n                        }\n                      }} />\n                  <br></br>\n                  <label className=\"urg-label\">Urgency: </label>\n                    <select id=\"urgencyStatus\" \n                            name=\"urgencyStatus\" \n                            value={this.props.urgency}\n                            onChange={(event) => {\n                              this.props.editUrgencyInput(event, this.props.index)\n                            }}>\n                      <option value=\"lightgreen\">Green</option>\n                      <option value=\"yellow\">Yellow</option>\n                      <option value=\"red\">Red</option>\n                    </select>\n                <button className=\"btn update-btn\">Done</button>\n              </form>\n              :\n              this.props.item}\n          </div>\n          <button className=\"btn\" onClick={() =>\n            this.props.deleteItem(this.props.index)} style={{ margin: \"0 20px\" }}>\n            Delete\n          </button>\n        </li>\n      </>\n    )\n  }\n}\n\nexport default ListItem;","import React from 'react';\n\nfunction ShowFormInput(props) {\n  return(\n    <div className=\"input-div\">\n      <form onSubmit={props.formSubmit}>\n        <textarea className=\"form-input\" value={props.todoInput} onChange={props.inputUpdate} />\n        <div>\n          <label>Urgency: </label>\n          <select id=\"urgencyStatus\" name=\"urgencyStatus\" value={props.urgencyInput} onChange={props.urgencyInputUpdate}>\n            <option value=\"lightgreen\">Green</option>\n            <option value=\"yellow\">Yellow</option>\n            <option value=\"red\">Red</option>\n          </select>\n        </div>\n        <button className=\"submit-btn\">Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default ShowFormInput;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItem from './listItemComponent';\nimport ShowFormInput from './showFormInput';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: {todo: '', urgency: 'lightgreen'},\n      items: [],\n      showTaskInput: false,\n    };\n  }\n\n  displayTaskInput = () => {\n    this.setState({showTaskInput: !this.state.showTaskInput})\n  }\n\n  inputUpdate = event => {\n    this.setState({input: {...this.state.input, todo: event.target.value}})\n  }\n\n  urgencyInputUpdate = event => {\n    this.setState({input: {...this.state.input, urgency: event.target.value}})\n  }\n\n  editInput = (event, i) => {\n    const items = this.state.items.slice()\n    items[i].todo = event.target.value\n    this.setState({items: items})\n  }\n\n  editUrgencyInput = (event, i) => {\n    const items = this.state.items.slice()\n    items[i].urgency = event.target.value\n    this.setState({items: items})\n  }\n\n  formSubmit = event => {\n    event.preventDefault()\n    this.setState({\n      items : [...this.state.items, this.state.input], \n      input: {todo: '', urgency: 'lightgreen'},\n      showTaskInput: false,\n    })\n  }\n\n  deleteItem = index => {\n    this.setState(prevState => {\n      return {items: prevState.items.filter((_, i) => i !== index)}\n    })\n  }\n\n  render() {\n\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div className=\"App-body\">\n        <h1>To-Do List:</h1>\n        <div className=\"todo-box\">\n          <div>\n            <ul>\n              {this.state.items.map((item, index) => {\n                return (<ListItem\n                  key={index}\n                  index={index}\n                  item={item.todo}\n                  urgency={item.urgency}\n                  editInput={this.editInput}\n                  editUrgencyInput={this.editUrgencyInput}\n                  deleteItem={this.deleteItem}\n                />)\n              })}\n            </ul>\n            </div>\n        </div>\n        <button \n          className=\"btn\" \n          onClick={this.displayTaskInput}>+ New Task\n        </button>\n        {this.state.showTaskInput && <ShowFormInput \n          formSubmit={this.formSubmit} \n          todoInput={this.state.input.todo}\n          inputUpdate={this.inputUpdate}\n          urgencyInput={this.state.input.urgency}\n          urgencyInputUpdate={this.urgencyInputUpdate}/>}\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}